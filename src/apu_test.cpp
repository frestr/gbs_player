#include <map>
#include <iostream>
#include <tuple>
#include "apu.h"

void APU::run_tests()
{
    // List initialization for tuples is not supported for lower than C++17,
    // so we use this lambda instead
    auto t = [](uint16_t addr, uint8_t write, uint8_t read) { 
        return std::make_tuple(addr, write, read);
    };

    // Format: {Address, {value to be written, expected read value}}
    const std::vector<std::tuple<uint16_t, uint8_t, uint8_t>> values = {
        /* --- Check min values (all 0). This tests whether the read filter works --- */
        // NR10-NR14
        t(0xFF10, 0x00, 0x80),
        t(0xFF11, 0x00, 0x3F),
        t(0xFF12, 0x00, 0x00),
        t(0xFF13, 0x00, 0xFF),
        t(0xFF14, 0x00, 0xBF),

        // NR20-NR24
        t(0xFF15, 0x00, 0xFF),
        t(0xFF16, 0x00, 0x3F),
        t(0xFF17, 0x00, 0x00),
        t(0xFF18, 0x00, 0xFF),
        t(0xFF19, 0x00, 0xBF),

        // NR30-NR34
        t(0xFF1A, 0x00, 0x7F),
        t(0xFF1B, 0x00, 0xFF),
        t(0xFF1C, 0x00, 0x9F),
        t(0xFF1D, 0x00, 0xFF),
        t(0xFF1E, 0x00, 0xBF),

        // NR40-NR44
        t(0xFF1F, 0x00, 0xFF),
        t(0xFF20, 0x00, 0xFF),
        t(0xFF21, 0x00, 0x00),
        t(0xFF22, 0x00, 0x00),
        t(0xFF23, 0x00, 0xBF),

        // Control/status
        t(0xFF24, 0x00, 0x00),
        t(0xFF25, 0x00, 0x00),
        t(0xFF26, 0x00, 0x70), // This actually turns off the APU power ...
        t(0xFF26, 0x80, 0xF0), // ... so we need to turn it on again
        
        // Invalid addresses
        t(0xFF27, 0x00, 0xFF),
        t(0xFF28, 0x00, 0xFF),
        t(0xFF29, 0x00, 0xFF),
        t(0xFF2A, 0x00, 0xFF),
        t(0xFF2B, 0x00, 0xFF),
        t(0xFF2C, 0x00, 0xFF),
        t(0xFF2D, 0x00, 0xFF),
        t(0xFF2E, 0x00, 0xFF),
        t(0xFF2F, 0x00, 0xFF),

        // Wave table
        t(0xFF30, 0x00, 0x00),
        t(0xFF31, 0x00, 0x00),
        t(0xFF32, 0x00, 0x00),
        t(0xFF33, 0x00, 0x00),
        t(0xFF34, 0x00, 0x00),
        t(0xFF35, 0x00, 0x00),
        t(0xFF36, 0x00, 0x00),
        t(0xFF37, 0x00, 0x00),
        t(0xFF38, 0x00, 0x00),
        t(0xFF39, 0x00, 0x00),
        t(0xFF3A, 0x00, 0x00),
        t(0xFF3B, 0x00, 0x00),
        t(0xFF3C, 0x00, 0x00),
        t(0xFF3D, 0x00, 0x00),
        t(0xFF3E, 0x00, 0x00),
        t(0xFF3F, 0x00, 0x00),

        /* --- Check max values --- */
        // NR10-NR14
        t(0xFF10, 0xFF, 0xFF),
        t(0xFF11, 0xFF, 0xFF),
        t(0xFF12, 0xFF, 0xFF),
        t(0xFF13, 0xFF, 0xFF),
        t(0xFF14, 0xFF, 0xFF),

        // NR20-NR24
        t(0xFF15, 0xFF, 0xFF),
        t(0xFF16, 0xFF, 0xFF),
        t(0xFF17, 0xFF, 0xFF),
        t(0xFF18, 0xFF, 0xFF),
        t(0xFF19, 0xFF, 0xFF),

        // NR30-NR34
        t(0xFF1A, 0xFF, 0xFF),
        t(0xFF1B, 0xFF, 0xFF),
        t(0xFF1C, 0xFF, 0xFF),
        t(0xFF1D, 0xFF, 0xFF),
        t(0xFF1E, 0xFF, 0xFF),

        // NR40-NR44
        t(0xFF1F, 0xFF, 0xFF),
        t(0xFF20, 0xFF, 0xFF),
        t(0xFF21, 0xFF, 0xFF),
        t(0xFF22, 0xFF, 0xFF),
        t(0xFF23, 0xFF, 0xFF),

        // Control/status
        t(0xFF24, 0xFF, 0xFF),
        t(0xFF25, 0xFF, 0xFF),
        t(0xFF26, 0xFF, 0xFF),
        
        // Invalid addresses
        t(0xFF27, 0xFF, 0xFF),
        t(0xFF28, 0xFF, 0xFF),
        t(0xFF29, 0xFF, 0xFF),
        t(0xFF2A, 0xFF, 0xFF),
        t(0xFF2B, 0xFF, 0xFF),
        t(0xFF2C, 0xFF, 0xFF),
        t(0xFF2D, 0xFF, 0xFF),
        t(0xFF2E, 0xFF, 0xFF),
        t(0xFF2F, 0xFF, 0xFF),

        // Wave table
        t(0xFF30, 0xFF, 0xFF),
        t(0xFF31, 0xFF, 0xFF),
        t(0xFF32, 0xFF, 0xFF),
        t(0xFF33, 0xFF, 0xFF),
        t(0xFF34, 0xFF, 0xFF),
        t(0xFF35, 0xFF, 0xFF),
        t(0xFF36, 0xFF, 0xFF),
        t(0xFF37, 0xFF, 0xFF),
        t(0xFF38, 0xFF, 0xFF),
        t(0xFF39, 0xFF, 0xFF),
        t(0xFF3A, 0xFF, 0xFF),
        t(0xFF3B, 0xFF, 0xFF),
        t(0xFF3C, 0xFF, 0xFF),
        t(0xFF3D, 0xFF, 0xFF),
        t(0xFF3E, 0xFF, 0xFF),
        t(0xFF3F, 0xFF, 0xFF),

        /* --- Check some middle value --- */
        // NR10-NR14
        t(0xFF10, 0x34, 0xB4),
        t(0xFF11, 0x34, 0x3F),
        t(0xFF12, 0x34, 0x34),
        t(0xFF13, 0x34, 0xFF),
        t(0xFF14, 0x34, 0xBF),

        // NR20-NR24
        t(0xFF15, 0x34, 0xFF),
        t(0xFF16, 0x34, 0x3F),
        t(0xFF17, 0x34, 0x34),
        t(0xFF18, 0x34, 0xFF),
        t(0xFF19, 0x34, 0xBF),

        // NR30-NR34
        t(0xFF1A, 0x34, 0x7F),
        t(0xFF1B, 0x34, 0xFF),
        t(0xFF1C, 0x34, 0xBF),
        t(0xFF1D, 0x34, 0xFF),
        t(0xFF1E, 0x34, 0xBF),

        // NR40-NR44
        t(0xFF1F, 0x34, 0xFF),
        t(0xFF20, 0x34, 0xFF),
        t(0xFF21, 0x34, 0x34),
        t(0xFF22, 0x34, 0x34),
        t(0xFF23, 0x34, 0xBF),

        // Control/status
        t(0xFF24, 0x34, 0x34),
        t(0xFF25, 0x34, 0x34),
        t(0xFF26, 0x34, 0x74),
        t(0xFF26, 0xFF, 0xFF), // Turn on apu again
        
        // Invalid addresses
        t(0xFF27, 0x34, 0xFF),
        t(0xFF28, 0x34, 0xFF),
        t(0xFF29, 0x34, 0xFF),
        t(0xFF2A, 0x34, 0xFF),
        t(0xFF2B, 0x34, 0xFF),
        t(0xFF2C, 0x34, 0xFF),
        t(0xFF2D, 0x34, 0xFF),
        t(0xFF2E, 0x34, 0xFF),
        t(0xFF2F, 0x34, 0xFF),

        // Wave table
        t(0xFF30, 0x34, 0x34),
        t(0xFF31, 0x34, 0x34),
        t(0xFF32, 0x34, 0x34),
        t(0xFF33, 0x34, 0x34),
        t(0xFF34, 0x34, 0x34),
        t(0xFF35, 0x34, 0x34),
        t(0xFF36, 0x34, 0x34),
        t(0xFF37, 0x34, 0x34),
        t(0xFF38, 0x34, 0x34),
        t(0xFF39, 0x34, 0x34),
        t(0xFF3A, 0x34, 0x34),
        t(0xFF3B, 0x34, 0x34),
        t(0xFF3C, 0x34, 0x34),
        t(0xFF3D, 0x34, 0x34),
        t(0xFF3E, 0x34, 0x34),
        t(0xFF3F, 0x34, 0x34),
    };

    for (const auto& entry : values) {
        uint16_t addr = std::get<0>(entry);
        uint8_t write = std::get<1>(entry);
        uint8_t expected_read = std::get<2>(entry);

        register_write(addr, write);
        uint8_t real_read = register_read(addr);

        if (real_read != expected_read) {
            std::cout << std::hex
                << "TEST FAILED: Addr 0x" << (unsigned int)addr
                << " - wrote " << (unsigned int)write
                << ", expected " << (unsigned int)expected_read
                << ", got " << (unsigned int)real_read << std::dec << "\n";
        }
    }
}
